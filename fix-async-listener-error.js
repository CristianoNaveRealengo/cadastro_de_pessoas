// ==============================================
// CORRE√á√ÉO PARA ERRO DE LISTENER ASS√çNCRONO
// ==============================================

// Este arquivo corrige o erro:
// "A listener indicated an asynchronous response by returning true,
// but the message channel closed before a response was received"

// ==============================================
// 1. ERROR HANDLERS GLOBAIS
// ==============================================

// Capturar promises rejeitadas n√£o tratadas
window.addEventListener("unhandledrejection", (event) => {
	console.warn("üî∂ Promise rejeitada capturada:", event.reason);

	// Verificar se √© o erro espec√≠fico de listener
	if (
		event.reason &&
		event.reason.message &&
		event.reason.message.includes("message channel closed")
	) {
		console.log("üì± Erro de extens√£o do navegador detectado - ignorando");
		event.preventDefault(); // Prevenir que apare√ßa no console
		return;
	}

	// Log outros erros para debug
	logAsyncError("Unhandled Promise Rejection", event.reason);

	// Prevenir que o erro trave a aplica√ß√£o
	event.preventDefault();
});

// Capturar erros JavaScript gerais
window.addEventListener("error", (event) => {
	console.warn("üî∂ Erro JavaScript capturado:", event.error);

	// Verificar se √© erro relacionado a extens√µes
	if (
		event.error &&
		event.error.message &&
		(event.error.message.includes("Extension context invalidated") ||
			event.error.message.includes("message channel closed"))
	) {
		console.log("üì± Erro de extens√£o detectado - ignorando");
		return;
	}

	logAsyncError("JavaScript Error", event.error);
});

// ==============================================
// 2. FUN√á√ÉO DE LOG DE ERROS
// ==============================================

function logAsyncError(type, error) {
	const errorInfo = {
		type: type,
		message: error?.message || error,
		stack: error?.stack,
		timestamp: new Date().toISOString(),
		userAgent: navigator.userAgent,
		url: window.location.href,
		isExtensionError: checkIfExtensionError(error),
	};

	// Salvar no localStorage para debug
	const errorLog = JSON.parse(localStorage.getItem("errorLog") || "[]");
	errorLog.push(errorInfo);

	// Manter apenas os √∫ltimos 50 erros
	if (errorLog.length > 50) {
		errorLog.splice(0, errorLog.length - 50);
	}

	localStorage.setItem("errorLog", JSON.stringify(errorLog));

	// Log no console apenas se n√£o for erro de extens√£o
	if (!errorInfo.isExtensionError) {
		console.error("üìã Erro registrado:", errorInfo);
	}
}

function checkIfExtensionError(error) {
	if (!error) return false;

	const extensionErrorPatterns = [
		"message channel closed",
		"Extension context invalidated",
		"chrome-extension://",
		"moz-extension://",
		"The message port closed before a response was received",
		"A listener indicated an asynchronous response",
	];

	const errorString = error.toString().toLowerCase();
	return extensionErrorPatterns.some((pattern) =>
		errorString.includes(pattern.toLowerCase())
	);
}

// ==============================================
// 3. WRAPPER PARA FUN√á√ïES ASS√çNCRONAS
// ==============================================

function safeAsync(asyncFn, context = "Unknown") {
	return async (...args) => {
		try {
			return await asyncFn(...args);
		} catch (error) {
			// Verificar se √© erro de extens√£o
			if (checkIfExtensionError(error)) {
				console.log(`üì± Erro de extens√£o em ${context} - ignorando`);
				return null; // Retornar valor seguro
			}

			console.error(`‚ùå Erro em ${context}:`, error);
			logAsyncError(`Async Function Error (${context})`, error);

			// Re-throw apenas se n√£o for erro de extens√£o
			throw error;
		}
	};
}

// ==============================================
// 4. WRAPPER PARA EVENT LISTENERS
// ==============================================

function safeEventListener(element, event, handler, options = {}) {
	const safeHandler = async (e) => {
		try {
			// Se o handler retorna uma promise, aguardar
			const result = handler(e);
			if (result && typeof result.then === "function") {
				await result;
			}
		} catch (error) {
			if (checkIfExtensionError(error)) {
				console.log(
					`üì± Erro de extens√£o no evento ${event} - ignorando`
				);
				return;
			}

			console.error(`‚ùå Erro no evento ${event}:`, error);
			logAsyncError(`Event Listener Error (${event})`, error);
		}
	};

	element.addEventListener(event, safeHandler, options);

	// Retornar fun√ß√£o para remover o listener
	return () => element.removeEventListener(event, safeHandler, options);
}

// ==============================================
// 5. CORRE√á√ïES ESPEC√çFICAS PARA O SISTEMA
// ==============================================

// Wrapper para Firebase operations
function safeFirebaseOperation(operation, operationName) {
	return safeAsync(operation, `Firebase ${operationName}`);
}

// Wrapper para localStorage operations
function safeLocalStorage(operation, operationName) {
	try {
		return operation();
	} catch (error) {
		console.error(`‚ùå Erro no localStorage (${operationName}):`, error);
		logAsyncError(`LocalStorage Error (${operationName})`, error);
		return null;
	}
}

// ==============================================
// 6. UTILIT√ÅRIOS DE DEBUG
// ==============================================

// Fun√ß√£o para verificar se h√° erros de extens√£o ativos
function checkExtensionErrors() {
	const errorLog = JSON.parse(localStorage.getItem("errorLog") || "[]");
	const recentErrors = errorLog.filter(
		(error) => Date.now() - new Date(error.timestamp).getTime() < 60000 // √öltimos 60 segundos
	);

	const extensionErrors = recentErrors.filter(
		(error) => error.isExtensionError
	);

	if (extensionErrors.length > 0) {
		console.log(
			`üì± ${extensionErrors.length} erro(s) de extens√£o detectado(s) no √∫ltimo minuto`
		);
		return true;
	}

	return false;
}

// Fun√ß√£o para limpar logs antigos
function cleanupErrorLogs() {
	const errorLog = JSON.parse(localStorage.getItem("errorLog") || "[]");
	const oneDayAgo = Date.now() - 24 * 60 * 60 * 1000;

	const recentErrors = errorLog.filter(
		(error) => new Date(error.timestamp).getTime() > oneDayAgo
	);

	localStorage.setItem("errorLog", JSON.stringify(recentErrors));
	console.log(
		`üßπ Logs de erro limpos: ${
			errorLog.length - recentErrors.length
		} removidos`
	);
}

// Fun√ß√£o para obter estat√≠sticas de erros
function getErrorStats() {
	const errorLog = JSON.parse(localStorage.getItem("errorLog") || "[]");

	const stats = {
		total: errorLog.length,
		extensionErrors: errorLog.filter((e) => e.isExtensionError).length,
		recentErrors: errorLog.filter(
			(e) => Date.now() - new Date(e.timestamp).getTime() < 3600000 // √öltima hora
		).length,
		errorTypes: {},
	};

	errorLog.forEach((error) => {
		stats.errorTypes[error.type] = (stats.errorTypes[error.type] || 0) + 1;
	});

	return stats;
}

// ==============================================
// 7. INICIALIZA√á√ÉO
// ==============================================

// Executar limpeza de logs na inicializa√ß√£o
document.addEventListener("DOMContentLoaded", () => {
	console.log("üîß Sistema de corre√ß√£o de erros ass√≠ncronos carregado");

	// Limpar logs antigos
	cleanupErrorLogs();

	// Verificar erros recentes
	if (checkExtensionErrors()) {
		console.log("üí° Dica: Teste em modo inc√≥gnito se os erros persistirem");
	}

	// Mostrar estat√≠sticas se houver erros
	const stats = getErrorStats();
	if (stats.total > 0) {
		console.log("üìä Estat√≠sticas de erros:", stats);
	}
});

// Limpeza peri√≥dica (a cada 30 minutos)
setInterval(cleanupErrorLogs, 30 * 60 * 1000);

// ==============================================
// 8. EXPORTAR FUN√á√ïES PARA USO GLOBAL
// ==============================================

// Tornar fun√ß√µes dispon√≠veis globalmente
window.safeAsync = safeAsync;
window.safeEventListener = safeEventListener;
window.safeFirebaseOperation = safeFirebaseOperation;
window.safeLocalStorage = safeLocalStorage;
window.checkExtensionErrors = checkExtensionErrors;
window.getErrorStats = getErrorStats;

// Fun√ß√£o para aplicar corre√ß√µes ao sistema existente
window.applyAsyncErrorFixes = function () {
	console.log("üîß Aplicando corre√ß√µes de erro ass√≠ncrono ao sistema...");

	// Substituir addEventListener padr√£o por vers√£o segura
	const originalAddEventListener = EventTarget.prototype.addEventListener;
	EventTarget.prototype.addEventListener = function (
		type,
		listener,
		options
	) {
		if (typeof listener === "function") {
			const safeListener = safeEventListener(
				this,
				type,
				listener,
				options
			);
			return safeListener;
		}
		return originalAddEventListener.call(this, type, listener, options);
	};

	console.log("‚úÖ Corre√ß√µes aplicadas com sucesso");
};

console.log("üõ°Ô∏è Sistema de prote√ß√£o contra erros ass√≠ncronos carregado");

// ==============================================
// 9. INSTRU√á√ïES DE USO
// ==============================================

/*
COMO USAR ESTE ARQUIVO:

1. Incluir no HTML ANTES de outros scripts:
   <script src="fix-async-listener-error.js"></script>

2. Para fun√ß√µes ass√≠ncronas existentes:
   // ANTES:
   async function minhaFuncao() { ... }
   
   // DEPOIS:
   const minhaFuncao = safeAsync(async function() { ... }, 'MinhaFuncao');

3. Para event listeners existentes:
   // ANTES:
   element.addEventListener('click', handler);
   
   // DEPOIS:
   safeEventListener(element, 'click', handler);

4. Para opera√ß√µes do Firebase:
   // ANTES:
   await firebaseService.saveRecord(record);
   
   // DEPOIS:
   await safeFirebaseOperation(() => firebaseService.saveRecord(record), 'saveRecord');

5. Para verificar erros:
   console.log(getErrorStats());
   checkExtensionErrors();

6. Para aplicar corre√ß√µes automaticamente:
   applyAsyncErrorFixes();
*/
