// ==============================================
// CONTROLE DE ACESSO BASEADO EM FUN√á√ïES (RBAC)
// ==============================================

/**
 * Sistema de controle de acesso que define:
 * - Fun√ß√µes (roles) dispon√≠veis no sistema
 * - Permiss√µes espec√≠ficas para cada fun√ß√£o
 * - Usu√°rios autorizados e suas fun√ß√µes
 * - Valida√ß√£o de acesso para opera√ß√µes
 */

// ==============================================
// DEFINI√á√ÉO DE PERMISS√ïES
// ==============================================

export const PERMISSIONS = {
	// Opera√ß√µes b√°sicas de dados
	CREATE_RECORD: "create_record",
	READ_RECORD: "read_record",
	UPDATE_RECORD: "update_record",
	DELETE_RECORD: "delete_record",

	// Opera√ß√µes de busca e filtros
	SEARCH_RECORDS: "search_records",
	VIEW_STATISTICS: "view_statistics",

	// Opera√ß√µes de importa√ß√£o/exporta√ß√£o
	EXPORT_DATA: "export_data",
	IMPORT_DATA: "import_data",

	// Opera√ß√µes administrativas
	MANAGE_USERS: "manage_users",
	VIEW_AUDIT_LOG: "view_audit_log",
	MANAGE_SYSTEM: "manage_system",

	// Opera√ß√µes de sess√£o
	EXTEND_SESSION: "extend_session",
	FORCE_LOGOUT: "force_logout",
};

// ==============================================
// DEFINI√á√ÉO DE FUN√á√ïES
// ==============================================

export const ROLES = {
	// Administrador - Acesso total
	ADMIN: {
		name: "Administrador",
		description: "Acesso completo ao sistema",
		permissions: [
			PERMISSIONS.CREATE_RECORD,
			PERMISSIONS.READ_RECORD,
			PERMISSIONS.UPDATE_RECORD,
			PERMISSIONS.DELETE_RECORD,
			PERMISSIONS.SEARCH_RECORDS,
			PERMISSIONS.VIEW_STATISTICS,
			PERMISSIONS.EXPORT_DATA,
			PERMISSIONS.IMPORT_DATA,
			PERMISSIONS.MANAGE_USERS,
			PERMISSIONS.VIEW_AUDIT_LOG,
			PERMISSIONS.MANAGE_SYSTEM,
			PERMISSIONS.EXTEND_SESSION,
			PERMISSIONS.FORCE_LOGOUT,
		],
		color: "red",
		icon: "fa-crown",
	},

	// Editor - Pode criar, editar e visualizar
	EDITOR: {
		name: "Editor",
		description: "Pode criar, editar e visualizar registros",
		permissions: [
			PERMISSIONS.CREATE_RECORD,
			PERMISSIONS.READ_RECORD,
			PERMISSIONS.UPDATE_RECORD,
			PERMISSIONS.SEARCH_RECORDS,
			PERMISSIONS.VIEW_STATISTICS,
			PERMISSIONS.EXPORT_DATA,
			PERMISSIONS.EXTEND_SESSION,
		],
		color: "blue",
		icon: "fa-edit",
	},

	// Visualizador - Apenas leitura
	VIEWER: {
		name: "Visualizador",
		description: "Apenas visualiza√ß√£o e busca",
		permissions: [
			PERMISSIONS.READ_RECORD,
			PERMISSIONS.SEARCH_RECORDS,
			PERMISSIONS.VIEW_STATISTICS,
			PERMISSIONS.EXTEND_SESSION,
		],
		color: "green",
		icon: "fa-eye",
	},

	// Auditor - Visualiza√ß√£o e relat√≥rios
	AUDITOR: {
		name: "Auditor",
		description: "Visualiza√ß√£o, relat√≥rios e auditoria",
		permissions: [
			PERMISSIONS.READ_RECORD,
			PERMISSIONS.SEARCH_RECORDS,
			PERMISSIONS.VIEW_STATISTICS,
			PERMISSIONS.EXPORT_DATA,
			PERMISSIONS.VIEW_AUDIT_LOG,
			PERMISSIONS.EXTEND_SESSION,
		],
		color: "purple",
		icon: "fa-search",
	},

	// Operador - Opera√ß√µes b√°sicas
	OPERATOR: {
		name: "Operador",
		description: "Opera√ß√µes b√°sicas de cadastro",
		permissions: [
			PERMISSIONS.CREATE_RECORD,
			PERMISSIONS.READ_RECORD,
			PERMISSIONS.UPDATE_RECORD,
			PERMISSIONS.SEARCH_RECORDS,
			PERMISSIONS.EXTEND_SESSION,
		],
		color: "yellow",
		icon: "fa-user-cog",
	},
};

// ==============================================
// USU√ÅRIOS AUTORIZADOS E SUAS FUN√á√ïES
// ==============================================

export const USER_ROLES = {
	// Administrador principal
	"cristianonaverealengo@gmail.com": ["ADMIN"],

	// Exemplos de outros usu√°rios (configurar conforme necess√°rio)
	"editor@exemplo.com": ["EDITOR"],
	"viewer@exemplo.com": ["VIEWER"],
	"auditor@exemplo.com": ["AUDITOR"],
	"operador@exemplo.com": ["OPERATOR"],

	// Usu√°rios com m√∫ltiplas fun√ß√µes
	"supervisor@exemplo.com": ["EDITOR", "AUDITOR"],
};

// ==============================================
// CLASSE DE CONTROLE DE ACESSO
// ==============================================

export class AccessControl {
	constructor() {
		this.currentUser = null;
		this.userRoles = [];
		this.userPermissions = new Set();
		this.auditLog = [];
	}

	// Definir usu√°rio atual e carregar suas permiss√µes
	setCurrentUser(user) {
		this.currentUser = user;
		this.loadUserRoles();
		this.loadUserPermissions();
		this.logAccess("USER_LOGIN", `Usu√°rio ${user.email} fez login`);

		console.log(`üîê Usu√°rio autenticado: ${user.email}`);
		console.log(`üë§ Fun√ß√µes: ${this.userRoles.join(", ")}`);
		console.log(`üîë Permiss√µes: ${this.userPermissions.size} carregadas`);
	}

	// Carregar fun√ß√µes do usu√°rio
	loadUserRoles() {
		if (!this.currentUser) {
			this.userRoles = [];
			return;
		}

		const email = this.currentUser.email;
		this.userRoles = USER_ROLES[email] || [];

		if (this.userRoles.length === 0) {
			console.warn(`‚ö†Ô∏è Usu√°rio ${email} n√£o possui fun√ß√µes definidas`);
			this.logAccess("ACCESS_DENIED", `Usu√°rio sem fun√ß√µes: ${email}`);
		}
	}

	// Carregar permiss√µes baseadas nas fun√ß√µes
	loadUserPermissions() {
		this.userPermissions.clear();

		this.userRoles.forEach((roleName) => {
			const role = ROLES[roleName];
			if (role) {
				role.permissions.forEach((permission) => {
					this.userPermissions.add(permission);
				});
			}
		});
	}

	// Verificar se usu√°rio tem permiss√£o espec√≠fica
	hasPermission(permission) {
		const hasAccess = this.userPermissions.has(permission);

		if (!hasAccess) {
			this.logAccess("ACCESS_DENIED", `Permiss√£o negada: ${permission}`);
			console.warn(`üö´ Acesso negado para: ${permission}`);
		}

		return hasAccess;
	}

	// Verificar se usu√°rio tem uma das permiss√µes da lista
	hasAnyPermission(permissions) {
		return permissions.some((permission) => this.hasPermission(permission));
	}

	// Verificar se usu√°rio tem todas as permiss√µes da lista
	hasAllPermissions(permissions) {
		return permissions.every((permission) =>
			this.hasPermission(permission)
		);
	}

	// Verificar se usu√°rio tem fun√ß√£o espec√≠fica
	hasRole(roleName) {
		return this.userRoles.includes(roleName);
	}

	// Obter informa√ß√µes do usu√°rio atual
	getCurrentUserInfo() {
		if (!this.currentUser) {
			return null;
		}

		return {
			email: this.currentUser.email,
			uid: this.currentUser.uid,
			roles: this.userRoles.map((roleName) => ({
				name: roleName,
				displayName: ROLES[roleName]?.name || roleName,
				color: ROLES[roleName]?.color || "gray",
				icon: ROLES[roleName]?.icon || "fa-user",
			})),
			permissions: Array.from(this.userPermissions),
			isAdmin: this.hasRole("ADMIN"),
		};
	}

	// Executar a√ß√£o com verifica√ß√£o de permiss√£o
	executeWithPermission(permission, action, errorMessage = null) {
		if (this.hasPermission(permission)) {
			this.logAccess("ACTION_EXECUTED", `A√ß√£o executada: ${permission}`);
			return action();
		} else {
			const message =
				errorMessage || `Voc√™ n√£o tem permiss√£o para: ${permission}`;
			this.showAccessDeniedMessage(message);
			throw new Error(`Acesso negado: ${permission}`);
		}
	}

	// Mostrar mensagem de acesso negado
	showAccessDeniedMessage(message) {
		// Criar toast de erro
		const toast = document.createElement("div");
		toast.className =
			"fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 transition-all duration-300";
		toast.innerHTML = `
            <div class="flex items-center">
                <i class="fas fa-ban mr-2"></i>
                <span>${message}</span>
            </div>
        `;

		document.body.appendChild(toast);

		// Remover ap√≥s 5 segundos
		setTimeout(() => {
			if (document.body.contains(toast)) {
				document.body.removeChild(toast);
			}
		}, 5000);
	}

	// Log de auditoria
	logAccess(action, details) {
		const logEntry = {
			timestamp: new Date().toISOString(),
			user: this.currentUser?.email || "anonymous",
			action,
			details,
			ip: this.getClientIP(),
			userAgent: navigator.userAgent,
		};

		this.auditLog.push(logEntry);

		// Manter apenas os √∫ltimos 1000 logs
		if (this.auditLog.length > 1000) {
			this.auditLog = this.auditLog.slice(-1000);
		}

		// Salvar no localStorage para persist√™ncia
		try {
			localStorage.setItem("audit_log", JSON.stringify(this.auditLog));
		} catch (error) {
			console.warn("Erro ao salvar log de auditoria:", error);
		}
	}

	// Obter IP do cliente (aproximado)
	getClientIP() {
		// Em produ√ß√£o, isso deveria vir do servidor
		return "client-ip";
	}

	// Obter logs de auditoria
	getAuditLog(limit = 100) {
		if (!this.hasPermission(PERMISSIONS.VIEW_AUDIT_LOG)) {
			throw new Error("Sem permiss√£o para visualizar logs de auditoria");
		}

		return this.auditLog.slice(-limit).reverse();
	}

	// Limpar usu√°rio atual
	clearCurrentUser() {
		if (this.currentUser) {
			this.logAccess(
				"USER_LOGOUT",
				`Usu√°rio ${this.currentUser.email} fez logout`
			);
		}

		this.currentUser = null;
		this.userRoles = [];
		this.userPermissions.clear();
	}

	// Verificar se sistema tem usu√°rios configurados
	hasConfiguredUsers() {
		return Object.keys(USER_ROLES).length > 0;
	}

	// Obter estat√≠sticas de acesso
	getAccessStats() {
		if (!this.hasPermission(PERMISSIONS.VIEW_AUDIT_LOG)) {
			throw new Error("Sem permiss√£o para visualizar estat√≠sticas");
		}

		const stats = {
			totalLogs: this.auditLog.length,
			uniqueUsers: new Set(this.auditLog.map((log) => log.user)).size,
			loginCount: this.auditLog.filter(
				(log) => log.action === "USER_LOGIN"
			).length,
			deniedCount: this.auditLog.filter(
				(log) => log.action === "ACCESS_DENIED"
			).length,
			lastActivity:
				this.auditLog.length > 0
					? this.auditLog[this.auditLog.length - 1].timestamp
					: null,
		};

		return stats;
	}
}

// ==============================================
// INST√ÇNCIA GLOBAL
// ==============================================

export const accessControl = new AccessControl();

// Disponibilizar globalmente para debug (apenas em desenvolvimento)
if (typeof window !== "undefined") {
	window.accessControl = accessControl;

	// Comandos √∫teis para desenvolvimento
	window.rbacDebug = {
		// Ver informa√ß√µes do usu√°rio atual
		userInfo: () => accessControl.getCurrentUserInfo(),

		// Verificar permiss√£o
		checkPermission: (permission) =>
			accessControl.hasPermission(permission),

		// Ver todas as permiss√µes
		listPermissions: () => Array.from(accessControl.userPermissions),

		// Ver logs de auditoria
		auditLog: (limit = 10) => {
			try {
				return accessControl.getAuditLog(limit);
			} catch (error) {
				console.error("Erro ao acessar logs:", error.message);
				return [];
			}
		},

		// Simular usu√°rio (apenas desenvolvimento)
		simulateUser: (email) => {
			if (
				window.location.hostname === "localhost" ||
				window.location.hostname === "127.0.0.1"
			) {
				accessControl.setCurrentUser({ email, uid: "simulated" });
				console.log(`üß™ Simulando usu√°rio: ${email}`);
			} else {
				console.warn("Simula√ß√£o dispon√≠vel apenas em desenvolvimento");
			}
		},
	};

	console.log("üîê Sistema RBAC carregado");
	console.log("üí° Use rbacDebug.userInfo() para ver informa√ß√µes do usu√°rio");
	console.log(
		'üí° Use rbacDebug.checkPermission("create_record") para testar permiss√µes'
	);
}

export default accessControl;
