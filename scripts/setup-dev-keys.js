#!/usr/bin/env node

/**
 * Script para configura√ß√£o segura de chaves de desenvolvimento
 * 
 * Este script ajuda a configurar chaves de API de forma segura
 * durante o desenvolvimento, sem exp√¥-las no c√≥digo.
 * 
 * USO:
 * node scripts/setup-dev-keys.js
 * 
 * SEGURAN√áA:
 * - Nunca commita chaves reais no reposit√≥rio
 * - Use apenas para desenvolvimento local
 * - Em produ√ß√£o, use vari√°veis de ambiente do servidor
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Configura√ß√µes
const CONFIG_DIR = path.join(__dirname, '..', 'config');
const ENV_CONFIG_FILE = path.join(CONFIG_DIR, 'env.config.js');
const GITIGNORE_FILE = path.join(__dirname, '..', '.gitignore');

// Interface para entrada do usu√°rio
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

/**
 * Fun√ß√£o para fazer perguntas ao usu√°rio
 */
function perguntarUsuario(pergunta) {
    return new Promise((resolve) => {
        rl.question(pergunta, (resposta) => {
            resolve(resposta.trim());
        });
    });
}

/**
 * Fun√ß√£o para verificar se o arquivo est√° no .gitignore
 */
function verificarGitignore() {
    try {
        const gitignoreContent = fs.readFileSync(GITIGNORE_FILE, 'utf8');
        const arquivosProtegidos = [
            'config/env.config.js',
            '.env',
            '.env.local'
        ];
        
        const arquivosNaoProtegidos = arquivosProtegidos.filter(arquivo => 
            !gitignoreContent.includes(arquivo)
        );
        
        if (arquivosNaoProtegidos.length > 0) {
            console.warn('‚ö†Ô∏è  AVISO: Os seguintes arquivos n√£o est√£o no .gitignore:');
            arquivosNaoProtegidos.forEach(arquivo => {
                console.warn(`   - ${arquivo}`);
            });
            console.warn('   Adicione-os ao .gitignore para evitar commit acidental!\n');
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è  N√£o foi poss√≠vel verificar o .gitignore\n');
    }
}

/**
 * Fun√ß√£o para criar o arquivo de configura√ß√£o
 */
function criarArquivoConfiguracao(config) {
    const conteudo = `// ==============================================
// CONFIGURA√á√ÉO DE DESENVOLVIMENTO - GERADO AUTOMATICAMENTE
// ==============================================

/**
 * ‚ö†Ô∏è  ARQUIVO GERADO AUTOMATICAMENTE
 * 
 * üîí SEGURAN√áA:
 * - Este arquivo cont√©m chaves sens√≠veis
 * - N√ÉO deve ser commitado no reposit√≥rio
 * - Apenas para desenvolvimento local
 * - Em produ√ß√£o, use vari√°veis de ambiente
 */

export default {
    apiKey: "${config.apiKey}",
    authDomain: "${config.authDomain}",
    projectId: "${config.projectId}",
    storageBucket: "${config.storageBucket}",
    messagingSenderId: "${config.messagingSenderId}",
    appId: "${config.appId}"
};

/**
 * üìù INSTRU√á√ïES PARA USO:
 * 
 * 1. Este arquivo √© carregado automaticamente pelo firebase-secure.config.js
 * 2. Para regenerar, execute: node scripts/setup-dev-keys.js
 * 3. Para remover, delete este arquivo e use meta tags ou vari√°veis de ambiente
 * 
 * üö® LEMBRE-SE:
 * - Nunca commite este arquivo
 * - Use apenas em desenvolvimento
 * - Configure vari√°veis de ambiente em produ√ß√£o
 */
`;

    // Criar diret√≥rio se n√£o existir
    if (!fs.existsSync(CONFIG_DIR)) {
        fs.mkdirSync(CONFIG_DIR, { recursive: true });
    }

    // Escrever arquivo
    fs.writeFileSync(ENV_CONFIG_FILE, conteudo, 'utf8');
    
    console.log('‚úÖ Arquivo de configura√ß√£o criado com sucesso!');
    console.log(`üìÅ Local: ${ENV_CONFIG_FILE}`);
}

/**
 * Fun√ß√£o para configurar localStorage (alternativa)
 */
function configurarLocalStorage(config) {
    const script = `
// Execute este c√≥digo no console do navegador para configurar o localStorage:

// Configurar chaves Firebase no localStorage (desenvolvimento)
localStorage.setItem('FIREBASE_API_KEY', '${config.apiKey}');
localStorage.setItem('FIREBASE_AUTH_DOMAIN', '${config.authDomain}');
localStorage.setItem('FIREBASE_PROJECT_ID', '${config.projectId}');
localStorage.setItem('FIREBASE_STORAGE_BUCKET', '${config.storageBucket}');
localStorage.setItem('FIREBASE_MESSAGING_SENDER_ID', '${config.messagingSenderId}');
localStorage.setItem('FIREBASE_APP_ID', '${config.appId}');

console.log('‚úÖ Configura√ß√£o Firebase salva no localStorage');

// Para limpar (quando necess√°rio):
// localStorage.removeItem('FIREBASE_API_KEY');
// localStorage.removeItem('FIREBASE_AUTH_DOMAIN');
// localStorage.removeItem('FIREBASE_PROJECT_ID');
// localStorage.removeItem('FIREBASE_STORAGE_BUCKET');
// localStorage.removeItem('FIREBASE_MESSAGING_SENDER_ID');
// localStorage.removeItem('FIREBASE_APP_ID');
`;

    const scriptFile = path.join(__dirname, 'setup-localStorage.js');
    fs.writeFileSync(scriptFile, script, 'utf8');
    
    console.log('\nüìã Script para localStorage criado:');
    console.log(`üìÅ Local: ${scriptFile}`);
    console.log('\nüí° Para usar, copie o conte√∫do e execute no console do navegador.');
}

/**
 * Fun√ß√£o principal
 */
async function main() {
    console.log('üîß CONFIGURA√á√ÉO SEGURA DE CHAVES DE DESENVOLVIMENTO\n');
    console.log('Este script ajuda a configurar chaves Firebase de forma segura.\n');
    
    // Verificar .gitignore
    verificarGitignore();
    
    // Verificar se j√° existe configura√ß√£o
    if (fs.existsSync(ENV_CONFIG_FILE)) {
        const sobrescrever = await perguntarUsuario(
            '‚ö†Ô∏è  Arquivo de configura√ß√£o j√° existe. Sobrescrever? (s/N): '
        );
        
        if (sobrescrever.toLowerCase() !== 's' && sobrescrever.toLowerCase() !== 'sim') {
            console.log('‚ùå Opera√ß√£o cancelada.');
            rl.close();
            return;
        }
    }
    
    console.log('\nüìù Digite as configura√ß√µes do Firebase:');
    console.log('(Voc√™ pode encontrar essas informa√ß√µes no Console do Firebase)\n');
    
    // Coletar configura√ß√µes
    const config = {
        apiKey: await perguntarUsuario('üîë API Key: '),
        authDomain: await perguntarUsuario('üåê Auth Domain: '),
        projectId: await perguntarUsuario('üìÅ Project ID: '),
        storageBucket: await perguntarUsuario('üóÑÔ∏è  Storage Bucket: '),
        messagingSenderId: await perguntarUsuario('üì® Messaging Sender ID: '),
        appId: await perguntarUsuario('üÜî App ID: ')
    };
    
    // Validar configura√ß√µes
    const camposVazios = Object.entries(config)
        .filter(([key, value]) => !value || value.trim() === '')
        .map(([key]) => key);
    
    if (camposVazios.length > 0) {
        console.log('\n‚ùå Erro: Os seguintes campos s√£o obrigat√≥rios:');
        camposVazios.forEach(campo => console.log(`   - ${campo}`));
        rl.close();
        return;
    }
    
    // Escolher m√©todo de configura√ß√£o
    console.log('\nüîß Escolha o m√©todo de configura√ß√£o:');
    console.log('1. Arquivo local (env.config.js) - Recomendado');
    console.log('2. localStorage (navegador) - Alternativo');
    console.log('3. Ambos');
    
    const metodo = await perguntarUsuario('\nEscolha (1-3): ');
    
    switch (metodo) {
        case '1':
            criarArquivoConfiguracao(config);
            break;
        case '2':
            configurarLocalStorage(config);
            break;
        case '3':
            criarArquivoConfiguracao(config);
            configurarLocalStorage(config);
            break;
        default:
            console.log('‚ùå Op√ß√£o inv√°lida.');
            rl.close();
            return;
    }
    
    console.log('\nüéâ Configura√ß√£o conclu√≠da com sucesso!');
    console.log('\nüìã PR√ìXIMOS PASSOS:');
    console.log('1. ‚úÖ Verifique se env.config.js est√° no .gitignore');
    console.log('2. ‚úÖ Teste a aplica√ß√£o localmente');
    console.log('3. ‚úÖ Configure vari√°veis de ambiente em produ√ß√£o');
    console.log('4. ‚ùå NUNCA commite chaves reais no reposit√≥rio\n');
    
    rl.close();
}

// Executar script
if (require.main === module) {
    main().catch(error => {
        console.error('‚ùå Erro:', error.message);
        rl.close();
        process.exit(1);
    });
}

module.exports = { main };