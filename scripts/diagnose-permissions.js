// ==============================================
// SCRIPT DE DIAGN√ìSTICO DE PERMISS√ïES
// ==============================================

/**
 * Script para diagnosticar problemas de permiss√µes do Firestore
 * Execute no console do navegador para identificar problemas
 */

// Importa√ß√µes necess√°rias do Firestore
import {
	addDoc,
	collection,
	deleteDoc,
	doc,
	getDoc,
	getDocs,
	limit,
	query,
} from "https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js";

class PermissionDiagnostic {
	constructor() {
		this.firebaseService = window.firebaseService;
	}

	// Executar diagn√≥stico completo
	async runFullDiagnostic() {
		console.log("üîç Iniciando diagn√≥stico de permiss√µes...\n");

		await this.checkAuthentication();
		await this.checkUserInfo();
		await this.checkFirestoreConnection();
		await this.testBasicOperations();

		console.log("\n‚úÖ Diagn√≥stico conclu√≠do!");
	}

	// Verificar autentica√ß√£o
	async checkAuthentication() {
		console.log("1Ô∏è‚É£ Verificando autentica√ß√£o...");

		if (!this.firebaseService) {
			console.error("‚ùå FirebaseService n√£o encontrado");
			return;
		}

		if (!this.firebaseService.currentUser) {
			console.error("‚ùå Usu√°rio n√£o autenticado");
			console.log("üí° Aguarde a autentica√ß√£o ou recarregue a p√°gina");
			return;
		}

		console.log("‚úÖ Usu√°rio autenticado");
		console.log(`   UID: ${this.firebaseService.currentUser.uid}`);
		console.log(
			`   An√¥nimo: ${this.firebaseService.currentUser.isAnonymous}`
		);
		console.log(
			`   Email: ${this.firebaseService.currentUser.email || "N/A"}`
		);
	}

	// Verificar informa√ß√µes do usu√°rio
	async checkUserInfo() {
		console.log("\n2Ô∏è‚É£ Verificando informa√ß√µes do usu√°rio...");

		if (!this.firebaseService.currentUser) {
			console.log("‚è≠Ô∏è Pulando - usu√°rio n√£o autenticado");
			return;
		}

		const user = this.firebaseService.currentUser;
		console.log("üìã Informa√ß√µes do usu√°rio:");
		console.log(`   UID: ${user.uid}`);
		console.log(
			`   Provider: ${user.providerData[0]?.providerId || "anonymous"}`
		);
		console.log(`   Criado em: ${user.metadata.creationTime}`);
		console.log(`   √öltimo login: ${user.metadata.lastSignInTime}`);
	}

	// Verificar conex√£o com Firestore
	async checkFirestoreConnection() {
		console.log("\n3Ô∏è‚É£ Verificando conex√£o com Firestore...");

		if (!this.firebaseService.currentUser) {
			console.log("‚è≠Ô∏è Pulando - usu√°rio n√£o autenticado");
			return;
		}

		console.log(`   Online: ${this.firebaseService.isOnline}`);
		console.log(`   Conectado: ${this.firebaseService.isConnected}`);

		// Testar acesso b√°sico
		try {
			const testQuery = query(
				collection(this.firebaseService.db, "records"),
				limit(1)
			);

			console.log("üîÑ Testando consulta b√°sica...");
			const snapshot = await getDocs(testQuery);
			console.log(
				`‚úÖ Consulta bem-sucedida - ${snapshot.size} documento(s) encontrado(s)`
			);
		} catch (error) {
			console.error("‚ùå Erro na consulta:", error.code);
			console.error("   Mensagem:", error.message);

			if (error.code === "permission-denied") {
				console.log("\nüí° SOLU√á√ÉO SUGERIDA:");
				console.log(
					"   1. Verifique se as regras do Firestore permitem acesso"
				);
				console.log(
					"   2. Use as regras tempor√°rias do arquivo 'firestore-temp.rules'"
				);
				console.log(
					"   3. Certifique-se de que o UID est√° na whitelist (se aplic√°vel)"
				);
			}
		}
	}

	// Testar opera√ß√µes b√°sicas
	async testBasicOperations() {
		console.log("\n4Ô∏è‚É£ Testando opera√ß√µes b√°sicas...");

		if (!this.firebaseService.currentUser) {
			console.log("‚è≠Ô∏è Pulando - usu√°rio n√£o autenticado");
			return;
		}

		// Testar cria√ß√£o
		try {
			console.log("üîÑ Testando cria√ß√£o de documento...");
			const testDoc = {
				id: `test_${Date.now()}`,
				nome: "Teste de Permiss√£o",
				email: "teste@exemplo.com",
				createdBy: this.firebaseService.currentUser.uid,
				updatedBy: this.firebaseService.currentUser.uid,
			};

			const docRef = await addDoc(
				collection(this.firebaseService.db, "records"),
				testDoc
			);

			console.log("‚úÖ Documento criado com sucesso:", docRef.id);

			// Testar leitura
			console.log("üîÑ Testando leitura do documento...");
			const docSnap = await getDoc(
				doc(this.firebaseService.db, "records", docRef.id)
			);

			if (docSnap.exists()) {
				console.log("‚úÖ Documento lido com sucesso");

				// Testar exclus√£o
				console.log("üîÑ Testando exclus√£o do documento...");
				await deleteDoc(
					doc(this.firebaseService.db, "records", docRef.id)
				);
				console.log("‚úÖ Documento exclu√≠do com sucesso");
			} else {
				console.error("‚ùå Documento n√£o encontrado ap√≥s cria√ß√£o");
			}
		} catch (error) {
			console.error("‚ùå Erro nas opera√ß√µes:", error.code);
			console.error("   Mensagem:", error.message);

			this.suggestSolutions(error.code);
		}
	}

	// Sugerir solu√ß√µes baseadas no erro
	suggestSolutions(errorCode) {
		console.log("\nüí° SOLU√á√ïES SUGERIDAS:");

		switch (errorCode) {
			case "permission-denied":
				console.log("   üîê PROBLEMA DE PERMISS√ÉO:");
				console.log(
					"   1. Aplique as regras tempor√°rias (firestore-temp.rules)"
				);
				console.log("   2. Verifique se o UID est√° na whitelist");
				console.log(
					"   3. Confirme se as regras foram publicadas no Console"
				);
				break;

			case "unauthenticated":
				console.log("   üîë PROBLEMA DE AUTENTICA√á√ÉO:");
				console.log("   1. Aguarde a autentica√ß√£o completar");
				console.log("   2. Recarregue a p√°gina");
				console.log("   3. Verifique a configura√ß√£o do Firebase Auth");
				break;

			case "unavailable":
				console.log("   üåê PROBLEMA DE CONECTIVIDADE:");
				console.log("   1. Verifique sua conex√£o com a internet");
				console.log("   2. Tente novamente em alguns segundos");
				console.log("   3. Verifique se o Firebase est√° funcionando");
				break;

			default:
				console.log("   ‚ùì ERRO DESCONHECIDO:");
				console.log("   1. Verifique a configura√ß√£o do Firebase");
				console.log("   2. Consulte a documenta√ß√£o do Firebase");
				console.log("   3. Verifique os logs do console");
		}
	}

	// Mostrar regras sugeridas baseadas no UID atual
	showSuggestedRules() {
		if (!this.firebaseService.currentUser) {
			console.log("‚ùå Usu√°rio n√£o autenticado");
			return;
		}

		const uid = this.firebaseService.currentUser.uid;

		console.log("\nüìã REGRAS SUGERIDAS PARA SEU UID:");
		console.log(
			"Copie e cole no Console do Firebase (Firestore > Rules):\n"
		);

		console.log(`rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAllowedUser() {
      return request.auth.uid in [
        "${uid}"  // Seu UID atual
      ];
    }
    
    match /records/{document} {
      allow read, write: if isAllowedUser();
    }
  }
}`);
	}
}

// Criar inst√¢ncia global
window.permissionDiagnostic = new PermissionDiagnostic();

// Fun√ß√µes de conveni√™ncia
window.diagnose = () => permissionDiagnostic.runFullDiagnostic();
window.showRules = () => permissionDiagnostic.showSuggestedRules();

// Importa√ß√µes necess√°rias (se n√£o estiverem dispon√≠veis)
if (typeof query === "undefined") {
	console.log("‚ö†Ô∏è Importando fun√ß√µes do Firestore...");
	// As importa√ß√µes j√° est√£o no firebase.config.js
}

console.log(`
üîç Diagn√≥stico de Permiss√µes carregado!

Comandos dispon√≠veis:
- diagnose()     // Executar diagn√≥stico completo
- showRules()    // Mostrar regras sugeridas para seu UID

Exemplo de uso:
diagnose();
`);

export default PermissionDiagnostic;
